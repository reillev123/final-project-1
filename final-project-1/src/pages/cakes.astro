---
import Layout from '../layouts/Layouts.astro';
---
<!-- Creating a Cake recipes page -->
<Layout>
    <!-- Setting the page title -->
    <title>Cake Recipes</title>
    <div class="container text-center mt-5">
        <!-- Page header -->
        <h2>Our Favorite Cake Recipes</h2>
        <!-- Page description -->
        <p>Discover our collection of delightful bakery recipes that you can make at home.</p>
    </div>
    <div class="spinner-wrapper">
        <!-- Spinner element for indicating loading state -->
        <div id="spinner" class="spinner-border" role="status" style="display: none;">
            <span class="sr-only">Loading...</span>
        </div>
    </div>
    <div id="recipes-container" class="row"></div> <!-- Container for recipes, with Bootstrap row class -->

    <script>
        // Function to fetch cake recipes from the API
        async function fetchRecipes() {
            // API URL with query parameters
            const fullURL = "https://api.edamam.com/api/recipes/v2?type=public&beta=true&q=%22cake%22&app_id=d7193a6c&app_key=c9b8ee8a1b8166ef57bc491438a36768&dishType=Desserts";
            
            try {
                // Fetch data from the API
                const response = await fetch(fullURL);
                if (!response.ok) {
                    throw new Error('Network response was not ok ' + response.statusText);
                }
                // Parse the JSON response
                const data = await response.json();
                return data.hits; // Return the array of recipes
            } catch (error) {
                // Log any errors
                console.error('There was a problem with the fetch operation:', error);
                return []; // Return an empty array if there's an error
            }
        }

        // Function to load recipes and update the UI
        async function loadRecipes() {
            const spinner = document.getElementById('spinner');
            const recipesContainer = document.getElementById('recipes-container');
            
            // Show spinner and hide recipes container while loading
            spinner.style.display = 'block';
            recipesContainer.style.display = 'none';
    
            try {
                // Fetch recipes and render them
                const recipes = await fetchRecipes();
                renderRecipes(recipes.slice(0, 9)); // Render the first 9 recipes
            } catch (error) {
                // Log any errors
                console.error('Error fetching recipes:', error);
            } finally {
                // Hide spinner and show recipes container after loading
                spinner.style.display = 'none';
                recipesContainer.style.display = 'flex';
            }
        }
    
        // Function to render recipes in the container
        function renderRecipes(recipes) {
            const recipesContainer = document.getElementById('recipes-container');
            recipesContainer.innerHTML = ''; // Clear previous recipes
    
            // Loop through each recipe and create HTML elements
            recipes.forEach(recipe => {
                const recipeElement = document.createElement('div');
                recipeElement.className = 'col-md-4 mb-4'; // Bootstrap column classes
                recipeElement.innerHTML = `
                    <div class="card">
                        <img src="${recipe.recipe.image}" class="card-img-top" alt="${recipe.recipe.label}">
                        <div class="card-body">
                            <h5 class="card-title">${recipe.recipe.label}</h5>
                            <a href="/final-project-1/recipe-details?uri=${encodeURIComponent(recipe.recipe.uri)}" class="btn btn-primary mt-2">View Recipe</a>
                        </div>
                    </div>
                `;
                recipesContainer.appendChild(recipeElement); // Add the recipe element to the container
            });
        }

        // Initial load of recipes when the DOM content is loaded
        document.addEventListener('DOMContentLoaded', () => {
            loadRecipes();
        });
    </script>
</Layout>
</Layout>
