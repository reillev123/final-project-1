---
import Layout from '../layouts/Layouts.astro';
---
<!-- Creating a Pastry recipes page -->
<Layout>
    <!-- Set the page title -->
    <title>Pastry Recipes</title>
    <!-- Main container with centered text and margin-top -->
    <div class="container text-center mt-5">
        <h2>Our Favorite Pastry Recipes</h2>
        <p>Discover our collection of delightful bakery recipes that you can make at home.</p>
    </div>
    <!-- Spinner wrapper to show loading indicator -->
    <div class="spinner-wrapper">
        <div id="spinner" class="spinner-border" role="status" style="display: none;">
            <span class="sr-only">Loading...</span>
        </div>
    </div>
    <!-- Container for recipes with Bootstrap row class -->
    <div id="recipes-container" class="row"></div> <!-- Add Bootstrap row class -->

    <script>
        // Async function to fetch pastry recipes from the API
        async function fetchRecipes() {
            // Construct the API URL with query parameters for pastry recipes
            const fullURL = "https://api.edamam.com/api/recipes/v2?type=public&beta=true&q=%22pastry%22&app_id=d7193a6c&app_key=c9b8ee8a1b8166ef57bc491438a36768&dishType=Desserts";
            
            try {
                // Fetch data from the API
                const response = await fetch(fullURL);
                // Throw an error if the response is not OK
                if (!response.ok) {
                    throw new Error('Network response was not ok ' + response.statusText);
                }
                // Parse the JSON data from the response
                const data = await response.json();
                // Return the hits (recipes) from the data
                return data.hits;
            } catch (error) {
                // Log any errors to the console
                console.error('There was a problem with the fetch operation:', error);
            }
        }

         // Function to load recipes and update the UI
         async function loadRecipes() {
            const spinner = document.getElementById('spinner');
            const recipesContainer = document.getElementById('recipes-container');
            
            // Show spinner and hide recipes container while loading
            spinner.style.display = 'block';
            recipesContainer.style.display = 'none';
    
            try {
                // Fetch recipes and render them
                const recipes = await fetchRecipes();
                renderRecipes(recipes.slice(0, 9)); // Render the first 9 recipes
            } catch (error) {
                // Log any errors
                console.error('Error fetching recipes:', error);
            } finally {
                // Hide spinner and show recipes container after loading
                spinner.style.display = 'none';
                recipesContainer.style.display = 'flex';
            }
        }

         
         // Function to render a list of recipes
    function renderRecipes(recipes) {
    // Get the container element where recipes will be displayed
    const recipesContainer = document.getElementById("recipes-container");
    // Clear any previous recipes
    recipesContainer.innerHTML = "";

    // Iterate over each recipe in the recipes array
    recipes.forEach((recipe) => {
        // Create a new div element for each recipe
        const recipeElement = document.createElement("div");
        recipeElement.className = "col-md-4 mb-4"; // Assign Bootstrap column classes for styling
        recipeElement.innerHTML = `
            <div class="card">
                <img src="${recipe.recipe.image}" class="card-img-top" alt="${recipe.recipe.label}">
                <div class="card-body">
                    <h5 class="card-title">${recipe.recipe.label}</h5>
                    <a href="/final-project-1/recipe-details?uri=${encodeURIComponent(recipe.recipe.uri)}" class="btn btn-primary mt-2">View Recipe</a>
                    <button class="btn btn-outline-primary mt-2 favourite-btn">
                        <i class="fa-regular fa-heart"></i>
                    </button>
                </div>
            </div>
        `;
        // Append the recipe element to the container
        recipesContainer.appendChild(recipeElement);
    });

    // Add click event listeners to all favourite buttons
    document.querySelectorAll('.favourite-btn').forEach(button => {
        button.addEventListener('click', function(event) {
            event.preventDefault(); // Prevent default button click behavior

            // Toggle heart icon between filled and outlined states
            const icon = this.querySelector('i');
            const isFilled = icon.classList.contains('fa-solid');
            icon.classList.toggle('fa-regular', isFilled);
            icon.classList.toggle('fa-solid', !isFilled);

            // Get the URI of the recipe associated with the button
            const recipeUri = this.previousElementSibling.href.split('=')[1];
            // Find the corresponding recipe object
            const recipe = recipes.find((r) => encodeURIComponent(r.recipe.uri) === recipeUri);

            // Retrieve favourites from local storage or initialize an empty array
            let favourites = JSON.parse(localStorage.getItem('favourites')) || [];

            if (isFilled) {
                // If the heart was filled, add the recipe from favourites
                favourites = favourites.filter((fav) => fav.uri !== recipe.recipe.uri);
            } else {
                // If the heart was not filled, remove the recipe to favourites
                favourites.push(recipe.recipe);
            }

            // Update the favourites in local storage
            localStorage.setItem('favourites', JSON.stringify(favourites));
        });
    });
}

// Initial load: add event listener to run loadRecipes when the page is fully loaded
document.addEventListener("DOMContentLoaded", () => {
    loadRecipes();
});

  
</script>
</Layout>
