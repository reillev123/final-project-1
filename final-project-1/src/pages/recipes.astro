---
import Layout from '../layouts/Layouts.astro';
---

<!-- Creating a main recipes page -->
<Layout>
    <!-- Set the page title -->
    <title>Recipes</title>
    <!-- Main container with centered text and margin-top -->
    <div class="container text-center mt-5">
        <h2>Our Favorite Recipes</h2>
        <p>Discover our collection of delightful bakery recipes that you can make at home.</p>
        <!-- Spinner to indicate loading state -->
        <div class="spinner-wrapper">
            <div id="spinner" class="spinner-border" role="status" style="display: none;">
                <span class="sr-only">Loading...</span>
            </div>
        </div>
        <!-- Container to display recipes, using Bootstrap row class -->
        <div id="recipes-container" class="row"></div>
    </div>

    <script>
        // Default query for fetching recipes
        const defaultQuery = 'pastries,cakes,bread';

        // Function to fetch recipes from the API
        async function fetchRecipes(query = defaultQuery) {
            const response = await fetch(`https://api.edamam.com/api/recipes/v2?type=public&beta=true&q=${query}&app_id=d7193a6c&app_key=c9b8ee8a1b8166ef57bc491438a36768&dishType=Desserts`);
            const data = await response.json();
            return data.hits;
        }

        // Function to shuffle an array
        function shuffleArray(array) {
            for (let i = array.length - 1; i > 0; i--) {
                const j = Math.floor(Math.random() * (i + 1));
                [array[i], array[j]] = [array[j], array[i]];
            }
            return array;
        }

        // Function to load and display recipes
        async function loadRecipes() {
            const spinner = document.getElementById('spinner');
            const recipesContainer = document.getElementById('recipes-container');
            
            // Show spinner and hide recipes container
            spinner.style.display = 'block';
            recipesContainer.style.display = 'none';

            try {
                // Fetch and shuffle recipes, then take the first 9
                const recipes = await fetchRecipes();
                const shuffledRecipes = shuffleArray(recipes).slice(0, 9);
                // Render the recipes
                renderRecipes(shuffledRecipes);
            } catch (error) {
                // Log any errors to the console
                console.error('Error fetching recipes:', error);
            } finally {
                // Hide spinner and show recipes container
                spinner.style.display = 'none';
                recipesContainer.style.display = 'flex';
            }
        }

        // Function to render recipes in the container
        function renderRecipes(recipes) {
            const recipesContainer = document.getElementById('recipes-container');
            // Clear any previous recipes
            recipesContainer.innerHTML = '';

            recipes.forEach(recipe => {
                // Create a new div element for each recipe
                const recipeElement = document.createElement('div');
                recipeElement.className = 'col-md-4 mb-4'; // Bootstrap column classes
                recipeElement.innerHTML = `
                    <div class="card">
                        <img src="${recipe.recipe.image}" class="card-img-top" alt="${recipe.recipe.label}">
                        <div class="card-body">
                            <h5 class="card-title">${recipe.recipe.label}</h5>
                            <a href="/final-project-1/recipe-details?uri=${encodeURIComponent(recipe.recipe.uri)}" class="btn btn-primary mt-2">View Recipe</a>
                        </div>
                    </div>
                `;
                // Append the recipe element to the container
                recipesContainer.appendChild(recipeElement);
            });
        }

        // Initial load: add event listener to run loadRecipes when the page is fully loaded
        document.addEventListener('DOMContentLoaded', () => {
            loadRecipes();
        });
    </script>
</Layout>
