---
import Layout from "../layouts/Layouts.astro";
---

<!-- Creating a main recipes page -->
<Layout>
    <!-- Set the page title -->
    <title>Recipes</title>
    <!-- Main container with centered text and margin-top -->
    <div class="container text-center mt-5">
        <h2>Our Favorite Recipes</h2>
        <p>
            Discover our collection of delightful bakery recipes that you can
            make at home.
        </p>
        <!-- Spinner to indicate loading state -->
        <div class="spinner-wrapper">
            <div
                id="spinner"
                class="spinner-border"
                role="status"
                style="display: none;"
            >
                <span class="sr-only">Loading...</span>
            </div>
        </div>
        <!-- Container to display recipes, using Bootstrap row class -->
        <div id="recipes-container" class="row"></div>
    </div>

    <script>
        // Default query for fetching recipes
        const defaultQuery = "pastries,cakes,bread";

        // Function to fetch recipes from the API
        async function fetchRecipes(query = defaultQuery) {
            const response = await fetch(
                `https://api.edamam.com/api/recipes/v2?type=public&beta=true&q=${query}&app_id=d7193a6c&app_key=c9b8ee8a1b8166ef57bc491438a36768&dishType=Desserts`,
            );
            const data = await response.json();
            return data.hits;
        }

        // Function to shuffle an array
        function shuffleArray(array) {
            for (let i = array.length - 1; i > 0; i--) {
                const j = Math.floor(Math.random() * (i + 1));
                [array[i], array[j]] = [array[j], array[i]];
            }
            return array;
        }

        // Function to load and display recipes
        async function loadRecipes() {
            const spinner = document.getElementById("spinner");
            const recipesContainer =
                document.getElementById("recipes-container");

            // Show spinner and hide recipes container
            spinner.style.display = "block";
            recipesContainer.style.display = "none";

            try {
                // Fetch and shuffle recipes, then take the first 9
                const recipes = await fetchRecipes();
                const shuffledRecipes = shuffleArray(recipes).slice(0, 9);
                // Render the recipes
                renderRecipes(shuffledRecipes);
            } catch (error) {
                // Log any errors to the console
                console.error("Error fetching recipes:", error);
            } finally {
                // Hide spinner and show recipes container
                spinner.style.display = "none";
                recipesContainer.style.display = "flex";
            }
        }

     
    function renderRecipes(recipes) {
        const recipesContainer = document.getElementById("recipes-container");
        // Clear any previous recipes
        recipesContainer.innerHTML = "";

        recipes.forEach((recipe) => {
            // Create a new div element for each recipe
            const recipeElement = document.createElement("div");
            recipeElement.className = "col-md-4 mb-4"; // Bootstrap column classes
            recipeElement.innerHTML = `
                <div class="card">
                    <img src="${recipe.recipe.image}" class="card-img-top" alt="${recipe.recipe.label}">
                    <div class="card-body">
                        <h5 class="card-title">${recipe.recipe.label}</h5>
                        <a href="/final-project-1/recipe-details?uri=${encodeURIComponent(recipe.recipe.uri)}" class="btn btn-primary mt-2 view-recipe-btn">View Recipe</a>
                        <button class="btn btn-outline-primary mt-2 favourite-btn">
                            <i class="fa-regular fa-heart"></i>
                        </button>
                    </div>
                </div>
            `;
            // Append the recipe element to the container
            recipesContainer.appendChild(recipeElement);
        });

       // Add event listeners to all elements with the class 'favourite-btn'
document.querySelectorAll('.favourite-btn').forEach(button => {
    // Add a click event listener to each 'favourite-btn'
    button.addEventListener('click', function(event) {
        event.preventDefault(); // Prevent the default button click behavior

        // Get the icon element inside the button
        const icon = this.querySelector('i');
        // Check if the icon currently has the class 'fa-solid' (filled heart)
        const isFilled = icon.classList.contains('fa-solid');
        // Toggle the 'fa-regular' and 'fa-solid' classes based on the current state
        icon.classList.toggle('fa-regular', isFilled);
        icon.classList.toggle('fa-solid', !isFilled);

        // Get the URI of the recipe associated with the button
        const recipeUri = this.previousElementSibling.href.split('=')[1];
        // Find the corresponding recipe object in the recipes array
        const recipe = recipes.find((r) => encodeURIComponent(r.recipe.uri) === recipeUri);

        // Retrieve the list of favourite recipes from localStorage or initialize an empty array
        let favourites = JSON.parse(localStorage.getItem('favourites')) || [];

        if (isFilled) {
            // If the heart was filled, remove the recipe from favourites
            favourites = favourites.filter((fav) => fav.uri !== recipe.recipe.uri);
        } else {
            // If the heart was not filled, add the recipe to favourites
            favourites.push(recipe.recipe);
        }

        // Update the favourites list in localStorage
        localStorage.setItem('favourites', JSON.stringify(favourites));
    });
});

    // Add event listeners to all elements with the class 'view-recipe-btn'
    document.querySelectorAll('.view-recipe-btn').forEach(button => {
        // Add a click event listener to each 'view-recipe-btn'
        button.addEventListener('click', function(event) {
            // Get the URI of the recipe associated with the button
            const recipeUri = this.href.split('=')[1];
            // Find the corresponding recipe object in the recipes array
            const recipe = recipes.find((r) => encodeURIComponent(r.recipe.uri) === recipeUri);

            // Store the current recipe in localStorage
            localStorage.setItem('currentRecipe', JSON.stringify(recipe.recipe));
        });
    });
        }  


    // Initial load: add event listener to run loadRecipes when the page is fully loaded
    document.addEventListener("DOMContentLoaded", () => {
        loadRecipes();
    });


</script>
</Layout>