---
import Layouts from "../layouts/Layouts.astro";
---

<Layouts>
    <title>Search Results</title>
    <!-- Main container with centered text and margin-top -->
    <div class="container text-center mt-5">
        <h2>Search Results</h2>
        <!-- Container to display recipes, using Bootstrap row class -->
        <div id="recipe-container" class="row"></div>
    </div>

    <script>
        // Wait until the DOM is fully loaded
        document.addEventListener('DOMContentLoaded', function() {
            function renderRecipes(recipes) {
        const recipeContainer = document.getElementById("recipe-container");
        // Clear any previous recipes
        recipeContainer.innerHTML = "";

        recipes.forEach((recipe) => {
            // Create a new div element for each recipe
            const recipesElement = document.createElement("div");
            recipesElement.className = "col-md-4 mb-4"; // Bootstrap column classes
            recipesElement.innerHTML = `
                <div class="card">
                    <img src="${recipe.recipe.image}" class="card-img-top" alt="${recipe.recipe.label}">
                    <div class="card-body">
                        <h5 class="card-title">${recipe.recipe.label}</h5>
                        <a href="/final-project-1/recipe-details?uri=${encodeURIComponent(recipe.recipe.uri)}" class="btn btn-primary mt-2 view-recipe-btn">View Recipe</a>
                        <button class="btn btn-outline-primary mt-2 favourite-btn">
                            <i class="fa-regular fa-heart"></i>
                        </button>
                    </div>
                </div>
            `;
            // Append the recipe element to the container
            recipeContainer.appendChild(recipesElement);
        });

       // Add event listeners to all elements with the class 'favourite-btn'
    document.querySelectorAll('.favourite-btn').forEach(button => {
         // Add a click event listener to each 'favourite-btn'
        button.addEventListener('click', function(event) {
            event.preventDefault(); // Prevent the default button click behavior

        // Get the icon element inside the button
        const icon = this.querySelector('i');
        // Check if the icon currently has the class 'fa-solid' (filled heart)
        const isFilled = icon.classList.contains('fa-solid');
        // Toggle the 'fa-regular' and 'fa-solid' classes based on the current state
        icon.classList.toggle('fa-regular', isFilled);
        icon.classList.toggle('fa-solid', !isFilled);

        // Get the URI of the recipe associated with the button
        const recipeUri = this.previousElementSibling.href.split('=')[1];
        // Find the corresponding recipe object in the recipes array
        const recipe = recipes.find((recipes) => encodeURIComponent(recipes.recipe.uri) === recipeUri);

        // Retrieve the list of favourite recipes from localStorage or initialize an empty array
        let favourites = JSON.parse(localStorage.getItem('favourites')) || [];

        if (isFilled) {
            // If the heart was filled, remove the recipe from favourites
            favourites = favourites.filter((fav) => fav.uri !== recipe.recipe.uri);
        } else {
            // If the heart was not filled, add the recipe to favourites
            favourites.push(recipe.recipe);
        }

        // Update the favourites list in localStorage
        localStorage.setItem('favourites', JSON.stringify(favourites));
    });
});

// Add event listeners to all elements with the class 'view-recipe-btn'
document.querySelectorAll('.view-recipe-btn').forEach(button => {
    // Add a click event listener to each 'view-recipe-btn'
    button.addEventListener('click', function(event) {
        // Get the URI of the recipe associated with the button
        const recipeUri = this.href.split('=')[1];
        // Find the corresponding recipe object in the recipes array
        const recipe = recipes.find((recipes) => encodeURIComponent(recipes.recipe.uri) === recipeUri);

        // Store the current recipe in localStorage
        localStorage.setItem('currentRecipe', JSON.stringify(recipe.recipe));
    });
});

    }
            // Function to fetch recipes from the API and render them
            function fetchAndRenderRecipes(query) {
                const fullURL = `https://api.edamam.com/api/recipes/v2?type=public&beta=true&q=${encodeURIComponent(query)}&app_id=d7193a6c&app_key=c9b8ee8a1b8166ef57bc491438a36768&dishType=Desserts`;

                fetch(fullURL)
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Network response was not ok ' + response.statusText);
                        }
                        return response.json();
                    })
                    .then(data => {
                        const recipes = data.hits;
                        renderRecipes(recipes); // Render the fetched recipes
                    })
                    .catch(error => {
                        // Log any errors to the console
                        console.error('There was a problem with the fetch operation:', error);
                    });
            }

            // Get the search form element
            const searchForm = document.getElementById('search-form');
            if (searchForm) {
                // Add event listener to handle form submission
                searchForm.addEventListener('submit', function(event) {
                    event.preventDefault(); // Prevent the default form submission
                    const query = (document.getElementById('search-input') as HTMLInputElement).value; // Get the search query
                    fetchAndRenderRecipes(query); // Fetch and render recipes based on the query
                });
            }

            // Initial render from localStorage if available
            const storedRecipes = localStorage.getItem('searchResults');
            if (storedRecipes) {
                renderRecipes(JSON.parse(storedRecipes)); // Render the stored recipes
            }
        });
    </script>
</Layouts>
